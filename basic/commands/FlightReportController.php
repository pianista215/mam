<?php
namespace app\commands;

use app\config\Config;
use yii\console\Controller;
use yii\console\ExitCode;

class FlightReportController extends Controller
{
    /**
     * This command assemble the flight report sent by acars in flights where all chunks have been uploaded.
     * @return int Exit code
     */
    public function actionAssembleChunks()
    {

        $storagePath = Config::get('chunks_storage_path');

        $this->stdout("Listing flights pending to analyze...\n");

        $flightsPendingToAnalyze = \app\models\Flight::find()
        ->where(['status' => 'S'])
        ->all();

        foreach ($flightsPendingToAnalyze as $flight) {
            $this->stdout("Processing flight {$flight->id}\n");

            $reportId = $flight->flightReport->id;

            $flightReportPath = $storagePath . DIRECTORY_SEPARATOR . $reportId;
            $this->stdout("Report path {$flightReportPath}\n");

            // Get chunk data
            $chunks = $flight->flightReport->acarsFiles;
            $files = [];

            foreach($chunks as $chunk) {
                $chunk_id = $chunk->chunk_id;
                $chunk_path = $flightReportPath . DIRECTORY_SEPARATOR . $chunk_id;
                $this->stdout("Acars file to merge {$chunk_path}\n");
                $files[] = $chunk_path;
            }

            // Join chunk data in the original gzip file

            // Uncompress gzip

            // Save json ready to process by mam-analyzer

        }

        $this->stdout("Done.\n");
        return ExitCode::OK;
    }

    /**
     * Import events and analysis generated by mam-analyzer for a flight report.
     */
    public function actionImportReportAnalysis()
    {
        $this->stdout("Importing analyzed report...\n");

        // TODO: buscar en /data/processed/ los json ya analizados
        // TODO: parsear el contenido
        // TODO: poblar tablas en DB con ActiveRecord
        // TODO: actualizar estado del vuelo

        $this->stdout("Done.\n");
        return ExitCode::OK;
    }
}
