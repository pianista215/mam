<?php
namespace app\commands;

use app\config\Config;
use yii\console\Controller;
use yii\console\ExitCode;

class FlightReportController extends Controller
{


    protected function joinAcarsFiles($report): ?string
    {
        $storagePath = Config::get('chunks_storage_path');
        $reportPath  = $storagePath . DIRECTORY_SEPARATOR . $report->id;
        $outputFile  = $reportPath . DIRECTORY_SEPARATOR . 'concat.gz';

        $chunks = $report->acarsFiles;

        // Open output file (overwrite if exists)
        $out = fopen($outputFile, 'wb');
        if (!$out) {
            throw new \RuntimeException("❌ Cannot open output file: $outputFile");
        }

        foreach ($chunks as $chunk) {
            $chunkPath = $reportPath . DIRECTORY_SEPARATOR . $chunk->chunk_id;
            if (!is_readable($chunkPath)) {
                fclose($out);
                throw new \RuntimeException("❌ Missing or unreadable chunk: $chunkPath");
            }

            // Append chunk contents
            $in = fopen($chunkPath, 'rb');
            stream_copy_to_stream($in, $out);
            fclose($in);
        }

        fclose($out);

        return $outputFile;
    }

    protected function isValidGzip($gzipFile)
    {
        $file = fopen($gzipFile, 'rb');

        // Read first two bytes
        $bytes = fread($file, 2);
        fclose($file);

        return $bytes === "\x1f\x8b";
    }

    protected function decompress($gzipFile, $report)
    {
        $storagePath = Config::get('chunks_storage_path');
        $reportPath  = $storagePath . DIRECTORY_SEPARATOR . $report->id;
        $outputFile  = $reportPath . DIRECTORY_SEPARATOR . 'report.json';

        $gz = gzopen($gzipFile, 'rb');
        if ($gz === false) {
            throw new \RuntimeException("Cannot open gzip file: $gzipFile");
        }

        $out = fopen($outputFile, 'wb');
        if ($out === false) {
            gzclose($gz);
            throw new \RuntimeException("Cannot create output file: $outputFile");
        }

        // Use blocks of 4KB
        while (!gzeof($gz)) {
            $data = gzread($gz, 4096);
            if ($data === false) {
                fclose($out);
                gzclose($gz);
                throw new \RuntimeException("Error reading gzip file: $gzipFile");
            }
            fwrite($out, $data);
        }

        gzclose($gz);
        fclose($out);

        return $outputFile;
    }

    /**
     * Assemble pending reports acars file to be analyze by mam-analyzer
     * @return int Exit code
     */
    public function actionAssemblePendingAcars()
    {
        $flightsPendingToAnalyze = \app\models\Flight::find()
        ->where(['status' => 'S'])
        ->all();

        foreach ($flightsPendingToAnalyze as $flight) {
            $report = $flight->flightReport;
            $gzipFile = $this->joinAcarsFiles($report);
            if(!$this->isValidGzip($gzipFile)){
                 $this->stderr("File is not valid gzip: $gzipFile\n");
                 return ExitCode::NOINPUT;
            }
            $finalPath = $this->decompress($gzipFile, $report);
            $this->stdout("{$finalPath}\n");
        }

        return ExitCode::OK;
    }

    /**
     * Import events and analysis generated by mam-analyzer for a flight report.
     */
    public function actionImportReportAnalysis($file)
    {
        $this->stdout("Importing report $file\n");

        if (!file_exists($file)) {
            $this->stderr("File not found: $file\n");
            return ExitCode::NOINPUT;
        }

        if (!preg_match('#/(\d+)/results/analysis\.json$#', $file, $matches)) {
            $this->stderr("Can't extract flight_report_id from path: $file\n");
            return ExitCode::DATAERR;
        }
        $reportId = (int)$matches[1];

        $json = file_get_contents($file);
        $data = json_decode($json, true);

        if ($data === null) {
            $this->stderr("Error parsing JSON: " . json_last_error_msg() . "\n");
            return ExitCode::DATAERR;
        }

        $db = Yii::$app->db;
        $transaction = $db->beginTransaction(Transaction::SERIALIZABLE);
        try {
            $report = FlightReport::findOne($reportId);
            if (!$report) {
                throw new \Exception("FlightReport $reportId not found.");
            }

            /**
             * Import phases
             */
            if (isset($data['phases'])) {
                foreach ($data['phases'] as $phaseData) {
                    $phase = new FlightPhase([
                        'flight_report_id' => $report->id,
                        'flight_phase_type_id' => $phaseData['type_id'],
                        'start' => $phaseData['start'],
                        'end' => $phaseData['end'],
                    ]);
                    if (!$phase->save()) {
                        throw new \Exception("Error saving FlightPhase: " . json_encode($phase->errors));
                    }

                    if (!empty($phaseData['analysis'])) {
                        foreach ($phaseData['analysis'] as $key => $value) {
                            $metricType = FlightPhaseMetricType::findOne(['code' => $key]);
                            if (!$metricType) {
                                throw new \Exception("FlightPhaseMetricType '$key' no existe en la base de datos.");
                            }

                            $metric = new FlightPhaseMetric([
                                'flight_phase_id' => $phase->id,
                                'metric_type_id' => $metricType->id,
                                'value' => $value,
                            ]);
                            if (!$metric->save()) {
                                throw new \Exception("Error saving FlightPhaseMetric: " . json_encode($metric->errors));
                            }
                        }
                    }
                }
            }

            /**
             * Import events
             */
            if (isset($data['events'])) {
                foreach ($data['events'] as $eventData) {
                    $event = new FlightEvent([
                        'flight_report_id' => $report->id,
                        'timestamp' => $eventData['timestamp'],
                    ]);
                    if (!$event->save()) {
                        throw new \Exception("Error saving FlightEvent: " . json_encode($event->errors));
                    }

                    foreach ($eventData as $key => $value) {
                        if ($key === 'timestamp') {
                            continue;
                        }

                        $attribute = FlightEventAttribute::findOne(['code' => $key]);
                        if (!$attribute) {
                            throw new \Exception("FlightEventAttribute '$key' doesn't exist on database.");
                        }

                        $dataEntry = new FlightEventData([
                            'event_id' => $event->id,
                            'attribute_id' => $attribute->id,
                            'value' => $value,
                        ]);
                        if (!$dataEntry->save()) {
                            throw new \Exception("Error saving FlightEventData: " . json_encode($dataEntry->errors));
                        }
                    }
                }
            }

            $transaction->commit();
            $this->stdout("Report succesfully reported $reportId\n");
            return ExitCode::OK;
        } catch (\Throwable $e) {
            $transaction->rollBack();
            $this->stderr("Failed importing $reportId: " . $e->getMessage() . "\n");
            return ExitCode::UNSPECIFIED_ERROR;
        }
    }
}
